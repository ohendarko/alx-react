Resources
Read or watch:

Webpack documentation - https://intranet.alxswe.com/rltoken/XEFTUAcZ_9sKurp1Bui7ug
Webpack beginner guide - https://intranet.alxswe.com/rltoken/6ngQzrV7xeKJjcRwdmrYAQ
npm-package.json - https://intranet.alxswe.com/rltoken/P00rJM5qCeaf33hsPuhgog

Learning Objectives
At the end of this project, you are expected to be able to explain to anyone, without the help of Google:

How to setup Webpack for a basic project
Entry points, output, and loaders
How to add plugins
How to split your code into chunks
How to setup a dev server
Requirements
All of your code will be executed on Ubuntu 18.04 LTS using Node 12.x.x
Allowed editors: vi, vim, emacs, Visual Studio Code
All of your files should end with a new line
A README.md file at the root of the folder of the project is mandatory
Tasks
0. Basic setup
mandatory
Create and run Webpack using a basic installation.

Create a folder named task_0.
Install webpack and webpack-cli as developer dependencies within the folder using npm.
Install jQuery as a regular dependency using npm.
Make sure that webpack and webpack-cli are listed under the devDependencies key along with jQuery being listed under the dependencies key within the package.json
Create a src directory with a index.js in it.
The file should import jquery and add three different paragraphs to the page body: (refer to this link under the Babel section for importing jQuery)
Holberton Dashboard

Dashboard data for the students

Copyright - Holberton School
Create a dist/index.html. Import your main.js in the body.
You must use jQuery to add the elements to the body of the page.
When running Webpack, your javascript and html files should be generated in a dist folder.
You should not use a custom webpack config file.
Opening your main file should not generate any error in the console.
Your html code should only import one Javascript script (the one generated by webpack).
Do NOT push your dist/main.js if you have one.
Repo:

GitHub repository: alx-react
Directory: 0x00-Webpack
File: task_0/package.json, task_0/src/index.js, task_0/dist/index.html
 
1. Learning how to use Webpack with a config file
mandatory
Installing packages

Create a folder named task_1, cd into it, and create a package.json using npm init -y
Install webpack (dev dependency), jQuery (dependency), and Lodash (dependency) within the folder using npm.
Modify your package.json to add a build script that runs webpack to create a production build. This lets you execute npm run build on the command line.
Using jQuery

Create a js directory with a javascript file named dashboard_main.js in it. The file should import jquery and add the below elements in the following order:
Paragraph element: Holberton Dashboard
Paragraph element: Dashboard data for the students
Button element with the text Click here to get started
Add a paragraph element as so <p id='count'></p>
Add another paragraph: Copyright - Holberton School
Prevent spammers

Write a function called updateCounter() that tracks the number of times the button element has been clicked.
Each time it’s called, update the count by 1 and set the content of the paragraph element with id=‘count’ to {count} clicks on the button
Bind the debounce function in Lodash to the click event on the button you created previously.
Requirements:

When running Webpack, your javascript should be generated in a public folder. You should also place your index.html in this folder.
The javascript file generated by Webpack should be named bundle.js
Set Webpack config mode to production
Opening your html file should not generate any error in the console
Your html code should only import one Javascript script (the one generated by webpack)
Resources:

Debounce documentation on Lodash
Repo:

GitHub repository: alx-react
Directory: 0x00-Webpack
File: task_1/js/dashboard_main.js, task_1/package.json, task_1/webpack.config.js, task_1/public/index.html